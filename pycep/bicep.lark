start: element*

element: "targetScope" "=" QUOTED_INTERPOLATION                             -> scope
       | [decorator] "param" string data_type ["=" param_value]             -> param
       | "var" string "=" var_value                                         -> var
       | "output" string data_type "=" output_value                         -> output
       | [decorator] "resource" string type_api_pair "=" resource_value     -> resource
       | [decorator] "module" string module_path "=" module_value           -> module

?value: "null"                                      -> null
      | SIGNED_INT                                  -> int
      | QUOTED_INTERPOLATION                        -> string
      | FUNCTION                                    -> string
      | bool
      | array
      | object
      | function

?bool: "true"                                       -> true
     | "false"                                      -> false
     | string

// element values

?param_value: "("? value ")"?
            | MULTI_LINE_STRING                     -> multi_line_string
            | operator

?var_value: param_value | loop

?output_value: param_value | loop

?resource_value: object | loop

?module_value: object | loop

// element type extras

data_type: STRING

type_api_pair: QUOTED_INTERPOLATION

module_path: QUOTED_INTERPOLATION

// loops

loop: "[" "for" (loop_index | loop_array | loop_array_index | loop_object) ":" ["if" "(" string ")"] value "]"

loop_index: STRING "in" "range" "(" STRING "," STRING ")"

loop_array: STRING "in" STRING

loop_array_index: "(" STRING "," STRING ")" "in" STRING

loop_object: STRING "in" "items" "(" STRING ")"

// data types

string: STRING

?quoted_string: STRING | QUOTED_INTERPOLATION

array: "[" value* "]"

object: "{" pair* "}"

pair: key ":" (value | loop | operator)

key: quoted_string

// decorators

decorator: ("@" (deco_allowed | deco_batch | deco_description | deco_min_len | deco_max_len | deco_min_val | deco_max_val | deco_metadata | deco_secure))+

deco_allowed: "allowed" "(" array ")"

deco_batch: "batchSize" "(" /\d+/ ")"

deco_description: "description" "(" QUOTED_INTERPOLATION ")"

deco_min_len: "minLength" "(" /\d+/ ")"

deco_max_len: "maxLength" "(" /\d+/ ")"

deco_min_val: "minValue" "(" /\d+/ ")"

deco_max_val: "maxValue" "(" /\d+/ ")"

deco_metadata: "metadata" "(" object ")"

deco_secure: "secure" "(" ")"

// functions

function: function_any | function_array | function_resource | function_scope | function_string

// functions - any

?function_any: any_func

any_func: ("any" | "sys.any") "(" value ")"

// functions - array

?function_array: empty | union

union: ("union" | "sys.union") "(" value ("," value)+ ")" ["." STRING]

empty: ("empty" | "sys.empty") "(" value ")"

// functions - resource

?function_resource: extension_resource_id | resource_id | subscription_resource_id | tenant_resource_id

extension_resource_id: ("extensionResourceId" | "az.extensionResourceId") "(" quoted_string ("," quoted_string)~2..3 ")"

// this rule results in a weird behaviour of "resourceId" being a TERM
// and then matching a key named "resourceId" in an object -> switching to earley for now
//_RESOURCE_ID: /(az.)?resourceId\s*\(/
//resource_id: _RESOURCE_ID quoted_string ("," quoted_string)~1..4 ")"
resource_id: ("resourceId" | "az.resourceId") "(" quoted_string ("," quoted_string)~1..4 ")"

subscription_resource_id: ("subscriptionResourceId" | "az.subscriptionResourceId") "(" quoted_string ("," quoted_string)~1..3 ")"

tenant_resource_id: ("tenantResourceId" | "az.tenantResourceId") "(" quoted_string ("," quoted_string)~1..2 ")"

// functions - scope

?function_scope: resource_group | subscription

resource_group: ("resourceGroup" | "az.resourceGroup") "(" [quoted_string ","? [quoted_string]] ")" ["." STRING]

subscription: ("subscription" | "az.subscription") "(" [quoted_string] ")" ["." STRING]

// functions - string

?function_string: guid

guid: ("guid" | "sys.guid") "(" value ("," value)* ")"

// operators

operator: operator_comparison | operator_logical

// operators - comparison

?operator_comparison: greater_than_or_equals | greater_than | less_than_or_equals | less_than
                    | equals | not_equals | equals_case_insens | not_equals_case_insens

greater_than_or_equals: value ">=" value

greater_than: value ">" value

less_than_or_equals: value "<=" value

less_than: value "<" value

equals: value "==" value

not_equals: value "!=" value

equals_case_insens: value "=~" value

not_equals_case_insens: value "!~" value

// operators - logical

?operator_logical: and_op | or_op | not_op | coalesce | conditional

and_op: value ("&&" value)+

or_op: value ("||" value)+

not_op: "!" "("? (not_op | bool) ")"?

coalesce: value ("??" value)+

conditional: "("? (STRING | function | operator_comparison | and_op | or_op) ")"? "?" param_value ":" param_value

// Terms

STRING: /[\w][\w_.]*/
FUNCTION: /(?!if\()(?=[\w_]+[\[\]]+)[\w_\-\[\]\/.,'= ]+/
QUOTED_INTERPOLATION: /'[^']*'/

MULTI_LINE_STRING: "'''" (/./ | NEWLINE)+ "'''"

%import common.CPP_COMMENT
%import common.NEWLINE
%import common.SIGNED_INT
%import common.WS
%ignore CPP_COMMENT
%ignore NEWLINE
%ignore WS
