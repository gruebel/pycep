start: ((element _CPP_COMMENT_NL?) | _CPP_COMMENT_NL)*

element: "targetScope" "=" QUOTED_INTERPOLATION                                         -> scope
       | [decorator] "param" STRING data_type ["=" value_brackets]                      -> param
       | [decorator] "var" STRING "=" var_value                                         -> var
       | [decorator] "output" STRING data_type "=" output_value                         -> output
       | [decorator] "resource" STRING type_api_pair [EXISTING] "=" resource_value      -> resource
       | [decorator] "module" STRING module_path "=" module_value                       -> module

?value: "null"                      -> null
      | "true"                      -> true
      | "false"                     -> false
      | INT                         -> int
      | STRING                      -> string
      | QUOTED_INTERPOLATION        -> string
      | INDEXED                     -> string
      | MULTI_LINE_STRING           -> multi_line_string
      | array
      | object
      | function
      | operator

?value_brackets: value
               | "(" value ")"

// element values

?var_value: value_brackets | loop

?output_value: value_brackets | loop

?resource_value: object | loop | deploy_condition

?module_value: object | loop | deploy_condition

child_resource: "resource" STRING QUOTED_INTERPOLATION [EXISTING] "=" object _CPP_COMMENT_NL+

// element type extras

data_type: STRING

type_api_pair: QUOTED_INTERPOLATION

module_path: QUOTED_INTERPOLATION

// loops

loop: "[" "for" (loop_array | loop_array_index | loop_object | loop_range) ":" ["if" "(" value_brackets ")"] value_brackets "]"

loop_array: STRING "in" value_brackets

loop_array_index: "(" STRING "," STRING ")" "in" value_brackets

loop_object: STRING "in" "items" "(" value_brackets ")"

loop_range: ["(" STRING ","] STRING ")"? "in" "range" "(" value_brackets "," value_brackets ")"

// deploy condition

deploy_condition: "if" "(" value_brackets ")" value_brackets

// data types

?quoted_string: STRING | QUOTED_STRING | QUOTED_INTERPOLATION

array: "[" _CPP_COMMENT_NL~0..10 (value_brackets _CPP_COMMENT_NL~1..5)* "]"

object: "{" _CPP_COMMENT_NL~0..10 (pair | child_resource)* "}"

pair: key ":" (value_brackets | loop) _CPP_COMMENT_NL+

!key: "resource" | quoted_string

// decorators

decorator: ("@" (deco_allowed | deco_batch | deco_description | deco_min_len | deco_max_len | deco_min_val | deco_max_val | deco_metadata | deco_secure) _CPP_COMMENT_NL)+

deco_allowed: "allowed" "(" array ")"

deco_batch: "batchSize" "(" /\d+/ ")"

deco_description: "description" "(" QUOTED_INTERPOLATION ")"

deco_min_len: "minLength" "(" /\d+/ ")"

deco_max_len: "maxLength" "(" /\d+/ ")"

deco_min_val: "minValue" "(" /-?\d+/ ")"

deco_max_val: "maxValue" "(" /\d+/ ")"

deco_metadata: "metadata" "(" object ")"

deco_secure: "secure" "(" ")"

// functions

function: function_any | function_array | function_date | function_deployment | function_file | function_logical
        | function_numeric | function_object | function_resource | function_scope | function_string

// functions - any

?function_any: any_func

any_func: ("any" | "sys.any") "(" value_brackets ")" ["." STRING]

// functions - array

?function_array: array_func | concat | contains | empty | first | intersection | last | length | max_func | min_func
               | skip | take | union

array_func: ("array" | "sys.array") "(" value_brackets ")"

concat: ("concat" | "sys.concat") "(" value_brackets ("," value_brackets)* ")"

contains: ("contains" | "sys.contains") "(" value_brackets "," value_brackets ")"

empty: ("empty" | "sys.empty") "(" value_brackets ")"

first: ("first" | "sys.first") "(" value_brackets ")" ["." STRING]

intersection: ("intersection" | "sys.intersection") "(" value_brackets ("," value_brackets)+ ")" ["." STRING]

last: ("last" | "sys.last") "(" value_brackets ")" ["." STRING]

length: ("length" | "sys.length") "(" value_brackets ")"

max_func: ("max" | "sys.max") "(" value_brackets ("," value_brackets)* ")"

min_func: ("min" | "sys.min") "(" value_brackets ("," value_brackets)* ")"

skip: ("skip" | "sys.skip") "(" value_brackets "," value_brackets ")"

take: ("take" | "sys.take") "(" value_brackets "," value_brackets ")"

union: ("union" | "sys.union") "(" value_brackets ("," value_brackets)+ ")" ["." STRING]

// functions - date

?function_date: date_time_add | utc_now

date_time_add: ("dateTimeAdd" | "sys.dateTimeAdd") "(" value_brackets "," value_brackets ["," value_brackets]  ")"

utc_now: ("utcNow" | "sys.utcNow") "(" [value_brackets] ")"

// functions - deployment

?function_deployment: deployment | environment

deployment: ("deployment" | "az.deployment") "(" ")" ["." STRING]

environment: ("environment" | "az.environment") "(" ")" ["." STRING]

// functions - file

?function_file: load_file_as_base64 | load_text_content

load_file_as_base64: ("loadFileAsBase64" | "sys.loadFileAsBase64") "(" value_brackets ")"

load_text_content: ("loadTextContent" | "sys.loadTextContent") "(" value_brackets ["," value_brackets] ")"

// functions - logical

?function_logical: bool_func

bool_func: ("bool" | "sys.bool") "(" value_brackets ")"

// functions - numeric

?function_numeric: int_func

int_func: ("int" | "sys.int") "(" value_brackets ")"

// functions - object

?function_object: json_func

json_func: ("json" | "sys.json") "(" value_brackets ")" ["." STRING]

// functions - resource

?function_resource: extension_resource_id | list_keys | pick_zones | reference | resource_id | subscription_resource_id | tenant_resource_id

extension_resource_id: ("extensionResourceId" | "az.extensionResourceId") "(" value_brackets ("," value_brackets)~2..3 ")"

list_keys: ("listKeys" | "az.listKeys") "(" value_brackets "," value_brackets ")" ["." (STRING | INDEXED)]

pick_zones: ("pickZones" | "az.pickZones") "(" value_brackets ("," value_brackets)~2..4 ")"

reference: ("reference" | "az.reference") "(" value_brackets ["," value_brackets ["," value_brackets]] ")" ["." STRING]

_RESOURCE_ID.1: ("resourceId" | "az.resourceId") "("
resource_id: _RESOURCE_ID value_brackets ("," value_brackets)~1..4 ")"

subscription_resource_id: ("subscriptionResourceId" | "az.subscriptionResourceId") "(" value_brackets ("," value_brackets)~1..3 ")"

tenant_resource_id: ("tenantResourceId" | "az.tenantResourceId") "(" value_brackets ("," value_brackets)~1..2 ")"

// functions - scope

?function_scope: management_group | resource_group | subscription | tenant

_MANAGEMENT_GROUP.1: ("managementGroup" | "az.managementGroup") "("
management_group: _MANAGEMENT_GROUP [value_brackets] ")" ["." STRING]

_RESOURCE_GROUP.1: ("resourceGroup" | "az.resourceGroup") "("
resource_group: _RESOURCE_GROUP [value_brackets ","? [value_brackets]] ")" ["." STRING]

subscription: ("subscription" | "az.subscription") "(" [value_brackets] ")" ["." STRING]

_TENANT.1: ("tenant" | "az.tenant") "("
tenant: _TENANT ")" ["." STRING]

// functions - string

?function_string: base64_func | base64_to_json | base64_to_string | data_uri | data_uri_to_string | ends_with | format
                | guid | index_of | last_index_of | new_guid | pad_left | replace | split | starts_with | string_func
                | substring | to_lower | to_upper | trim | unique_string | uri | uri_component | uri_component_to_string

base64_func: ("base64" | "sys.base64") "(" value_brackets ")"

base64_to_json: ("base64ToJson" | "sys.base64ToJson") "(" value_brackets ")"

base64_to_string: ("base64ToString" | "sys.base64ToString") "(" value_brackets ")"

data_uri: ("dataUri" | "sys.dataUri") "(" value_brackets ")"

data_uri_to_string: ("dataUriToString" | "sys.dataUriToString") "(" value_brackets ")"

ends_with: ("endsWith" | "sys.endsWith") "(" value_brackets "," value_brackets ")"

format: ("format" | "sys.format") "(" value_brackets ("," value_brackets)+ ")"

guid: ("guid" | "sys.guid") "(" value_brackets ("," value_brackets)* ")"

index_of: ("indexOf" | "sys.indexOf") "(" value_brackets "," value_brackets ")"

last_index_of: ("lastIndexOf" | "sys.lastIndexOf") "(" value_brackets "," value_brackets ")"

new_guid: ("newGuid" | "sys.newGuid") "(" ")"

pad_left: ("padLeft" | "sys.padLeft") "(" value_brackets "," value_brackets ["," value_brackets] ")"

replace: ("replace" | "sys.replace") "(" value_brackets ("," value_brackets)~2 ")"

split: ("split" | "sys.split") "(" value_brackets "," value_brackets ")" ["[" INT "]"]

starts_with: ("startsWith" | "sys.startsWith") "(" value_brackets "," value_brackets ")"

string_func: ("string" | "sys.string") "(" value_brackets ")"

substring: ("substring" | "sys.substring") "(" value_brackets "," value_brackets ["," value_brackets] ")"

to_lower: ("toLower" | "sys.toLower") "(" value_brackets ")"

to_upper: ("toUpper" | "sys.toUpper") "(" value_brackets ")"

trim: ("trim" | "sys.trim") "(" value_brackets ")"

unique_string: ("uniqueString" | "sys.uniqueString") "(" value_brackets ("," value_brackets)* ")"

uri: ("uri" | "sys.uri") "(" value_brackets "," value_brackets ")"

uri_component: ("uriComponent" | "sys.uriComponent") "(" value_brackets ")"

uri_component_to_string: ("uriComponentToString" | "sys.uriComponentToString") "(" value_brackets ")"

// operators

operator: operator_comparison | operator_logical | operator_numeric

// operators - comparison

?operator_comparison: greater_than_or_equals | greater_than | less_than_or_equals | less_than
                    | equals | not_equals | equals_case_insens | not_equals_case_insens

greater_than_or_equals: value_brackets ">=" value_brackets

greater_than: value_brackets ">" value_brackets

less_than_or_equals: value_brackets "<=" value_brackets

less_than: value_brackets "<" value_brackets

equals: value_brackets "==" value_brackets

not_equals: value_brackets "!=" value_brackets

equals_case_insens: value_brackets "=~" value_brackets

not_equals_case_insens: value_brackets "!~" value_brackets

// operators - logical

?operator_logical: and_op | or_op | not_op | coalesce | conditional

and_op: value_brackets "&&" value_brackets

or_op: value_brackets "||" value_brackets

not_op: "!" value_brackets

coalesce: value_brackets "??" value_brackets

conditional: value_brackets "?" value_brackets ":" value_brackets

// operators - numeric

?operator_numeric: add | divide | minus | modulo | multiply | substract

add: value_brackets "+" value_brackets

divide: value_brackets "/" value_brackets

minus: "-" value_brackets

modulo: value_brackets "%" value_brackets

multiply: value_brackets "*" value_brackets

substract.1: value_brackets "-" value_brackets

// Terms

EXISTING: "existing"

STRING: /[a-zA-Z_](::|[\w_.])*/
QUOTED_STRING: "'" STRING "'"
INDEXED: /(?=[\w][\w_.]+(.(get|list)[a-zA-Z]*\(('[\w-]+'|[\w.]+)?\)|[\[\]])+)(.(get|list)[a-zA-Z]*\(('[\w-]+'|[\w.]+)?\)|\[[\w\[\]_().']+\]|[\w_\-\/.,'= ])+/
QUOTED_INTERPOLATION: /(?!.*''')'(\${(?:[^}'{]+|(?R))*+}|\\'|[^'])*'/

MULTI_LINE_STRING: "'''" (/.*?/ | NEWLINE)+ "'''"

_NEWLINE: NEWLINE
_CPP_COMMENT_NL: [CPP_COMMENT] NEWLINE

%import common.C_COMMENT
%import common.CPP_COMMENT
%import common.SH_COMMENT
%import common.INT
%import common.NEWLINE
%import common.WS_INLINE

%ignore C_COMMENT
%ignore SH_COMMENT
%ignore WS_INLINE
