name: CI

on:
  push:
    branches:
      - master
  pull_request:

permissions: read-all

env:
  POETRY_VERSION: "1.1.15"
  MIN_PYTHON_VERSION: "3.7"

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8  # v3.0.2
      - uses: actions/setup-python@b55428b1882923874294fa556849718a1d7f2ca5  # v4.2.0
        with:
          python-version: ${{ env.MIN_PYTHON_VERSION }}
      - uses: pre-commit/action@646c83fcd040023954eafda54b4db0192ce70507  # v3.0.0

  tests:
    needs: pre-commit
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        experimental: [false]
        include:
          - os: ubuntu-latest
            python-version: "3.11-dev"
            experimental: true
      fail-fast: false
    continue-on-error: ${{ matrix.experimental }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8  # v3.0.2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@b55428b1882923874294fa556849718a1d7f2ca5  # v4.2.0
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Set up poetry ${{ env.POETRY_VERSION }}
        uses: abatilo/actions-poetry@0816ab2aa6474edc70c5f39eef65dea80c70d153  # v2.1.6
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Install dependencies
        run: poetry install
      - name: Install pytest plugin
        run: poetry run pip install pytest-github-actions-annotate-failures
      - name: Run pytest
        run: poetry run python -m pytest tests/
      - if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.7'
        name: Create coverage report
        run: |
          poetry run pip install pytest-cov
          poetry run python -m pytest -s --cov=pycep --cov-report=xml tests/
      - if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.7' && github.repository == 'gruebel/pycep'
        name: Upload coverage to codecov
        uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378  # v3.1.0
        with:
          flags: unittests

  publish:
    if: github.event_name == 'push'
    needs: tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8  # v3.0.2
      - uses: actions/setup-python@b55428b1882923874294fa556849718a1d7f2ca5  # v4.2.0
        with:
          python-version: ${{ env.MIN_PYTHON_VERSION }}
      - name: Set up poetry ${{ env.POETRY_VERSION }}
        uses: abatilo/actions-poetry@0816ab2aa6474edc70c5f39eef65dea80c70d153  # v2.1.6
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Install dependencies
        run: poetry install --no-dev
      - name: Bump prerelease version
        run: |
          # bump version
          poetry version prerelease
          new_version=$(poetry version -s)

          # commit and push
          git config --global user.name 'gruebel'
          git config --global user.email 'gruebel@users.noreply.github.com'
          git add pyproject.toml
          git commit -m "publish version ${new_version}"
          git push
      - name: Publish prerelease to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish --build
